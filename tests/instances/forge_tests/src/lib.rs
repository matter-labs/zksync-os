#![cfg(test)]
use alloy::consensus::{TxEip1559, TxEip2930};
use alloy::primitives::{address, TxKind, U256};
use alloy::signers::local::PrivateKeySigner;
use rig::forward_system::run::BatchOutput;
use rig::ruint::aliases::B160;
use rig::{alloy, ruint};
use std::collections::HashSet;
use std::str::FromStr;
use zk_ee::common_structs::derive_flat_storage_key;
use zk_ee::utils::Bytes32;

///
/// Mints base tokens to `eoa_address` and runs `encoded_txs`
///
fn run_transactions_as_eoa(
    eoa_address: alloy::primitives::Address,
    encoded_txs: Vec<Vec<u8>>,
) -> BatchOutput {
    let mut chain = rig::Chain::empty(None);
    chain.set_balance(
        B160::from_be_bytes(eoa_address.0 .0),
        U256::from(1_000_000_000_000_000_u64),
    );
    chain.run_block(encoded_txs, None, None)
}

fn address_to_bytecodehash_key(address: &alloy::primitives::Address) -> Bytes32 {
    let account_properties_address = ruint::aliases::B160::from_str("0x8003").unwrap();

    derive_flat_storage_key(
        &account_properties_address,
        &Bytes32::from_u256_be(&U256::from_be_slice(&address.0 .0).into()),
    )
}

#[test]
fn run_forge_test_create_many_contracts() {
    // From forge/out/CreateManyContracts.sol/CreateTesteer.json bytecode
    const CREATE_TESTER_DEPLOYMENT_BYTECODE: &str = "608060405234801561000f575f80fd5b506102898061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c8063572ba83c1461004e578063a16718b11461007c578063b81717b01461008f578063c0406226146100a2575b5f80fd5b5f54610060906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600254610060906001600160a01b031681565b600154610060906001600160a01b031681565b6100aa6100ac565b005b5f6040516100b9906101b4565b604051809103905ff0801580156100d2573d5f803e3d5ffd5b505f80546001600160a01b0319166001600160a01b038316178155604051631cd85b1d60e21b6020820152919250906024016040516020818303038152906040528051906020012090505f8160405161012a906101b4565b8190604051809103905ff5905080158015610147573d5f803e3d5ffd5b50600180546001600160a01b0319166001600160a01b0383161790556040519091505f90610174906101b4565b604051809103905ff08015801561018d573d5f803e3d5ffd5b50600280546001600160a01b0319166001600160a01b039290921691909117905550505050565b6093806101c18339019056fe6080604052348015600e575f80fd5b50607980601a5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80638381f58a14602a575b5f80fd5b60315f5481565b60405190815260200160405180910390f3fea264697066735822122029b0a85d235c8d96fd48c8c0fdbe9d5e370f2ba303d14d2132d57928ba4801a164736f6c63430008180033a2646970667358221220d3ce34411ef88b8f175fb4bde840cb60ff38137081a8550777e0fcc172ac37da64736f6c63430008180033";

    // Wallet (3) from anvil
    let eoa_wallet = PrivateKeySigner::from_str(
        "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",
    )
    .unwrap();

    let deployment_tx = TxEip2930 {
        chain_id: 37u64,
        nonce: 0,
        gas_price: 1000,
        gas_limit: 10_060_000,
        to: TxKind::Create,
        value: Default::default(),
        access_list: Default::default(),
        input: hex::decode(CREATE_TESTER_DEPLOYMENT_BYTECODE)
            .unwrap()
            .into(),
    };
    let encoded_deployment_tx = rig::utils::sign_and_encode_alloy_tx(deployment_tx, &eoa_wallet);

    let run_tx = TxEip1559 {
        chain_id: 37u64,
        nonce: 1,
        max_fee_per_gas: 1000,
        max_priority_fee_per_gas: 1000,
        gas_limit: 1_250_000,
        to: TxKind::Call(address!("057ef64e23666f000b34ae31332854acbd1c8544")),
        value: Default::default(),
        access_list: Default::default(),
        // 'run()'
        input: hex::decode("c0406226").unwrap().into(),
    };
    let encoded_run_tx = rig::utils::sign_and_encode_alloy_tx(run_tx, &eoa_wallet);

    let output = run_transactions_as_eoa(
        eoa_wallet.address(),
        vec![encoded_deployment_tx, encoded_run_tx],
    );

    let sset: HashSet<Bytes32> = output.storage_writes.iter().map(|x| x.key).collect();

    // These are addresses taken from tests/forge/broadcast file.
    let addresses = [
        address!("3b3112c4376d037822decff3fe6cd30e1e726517"),
        address!("2b5f078e29e71284b57be28e1826b9dabd02cecd"),
        address!("f9ec57d2436177b4decf90ef9edffcef0cc0ee25"),
    ];

    for address in addresses {
        assert!(
            sset.contains(&address_to_bytecodehash_key(&address)),
            "No contract deployed to  {:?}.",
            address
        );
    }
}

// More complex test that also creates some contracts inside the constructor.
#[test]
fn run_forge_test_create_in_constructor() {
    // From forge/out/CreateManyContracts.sol/CreateTesteer.json bytecode
    const CREATE_TESTER_DEPLOYMENT_BYTECODE: &str = "608060405234801561000f575f80fd5b505f60405161001d906100a3565b604051809103905ff080158015610036573d5f803e3d5ffd5b505f80546001600160a01b0319166001600160a01b03831617815560405191925090610061906100a3565b604051809103905ff08015801561007a573d5f803e3d5ffd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506100af9050565b60938061038383390190565b6102c7806100bc5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c806338cb3c8514610064578063572ba83c14610093578063a16718b1146100a6578063b81717b0146100b9578063c0406226146100cc578063cff26161146100d6575b5f80fd5b600154610077906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600254610077906001600160a01b031681565b600454610077906001600160a01b031681565b600354610077906001600160a01b031681565b6100d46100e8565b005b5f54610077906001600160a01b031681565b5f6040516100f5906101f2565b604051809103905ff08015801561010e573d5f803e3d5ffd5b50600280546001600160a01b0319166001600160a01b038316179055604051631cd85b1d60e21b60208201529091505f906024016040516020818303038152906040528051906020012090505f81604051610168906101f2565b8190604051809103905ff5905080158015610185573d5f803e3d5ffd5b50600380546001600160a01b0319166001600160a01b0383161790556040519091505f906101b2906101f2565b604051809103905ff0801580156101cb573d5f803e3d5ffd5b50600480546001600160a01b0319166001600160a01b039290921691909117905550505050565b6093806101ff8339019056fe6080604052348015600e575f80fd5b50607980601a5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80638381f58a14602a575b5f80fd5b60315f5481565b60405190815260200160405180910390f3fea2646970667358221220d3ac4f91aa92da8a725f65247ad141cb5248cecd62ffc0db6e8f5feb863a663c64736f6c63430008180033a26469706673582212209dc1b89411a724d3b1def742f19d64a92dd38b7896e3d69f904194c82838cf1e64736f6c634300081800336080604052348015600e575f80fd5b50607980601a5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80638381f58a14602a575b5f80fd5b60315f5481565b60405190815260200160405180910390f3fea2646970667358221220d3ac4f91aa92da8a725f65247ad141cb5248cecd62ffc0db6e8f5feb863a663c64736f6c63430008180033";

    // Wallet (3) from anvil
    let eoa_wallet = PrivateKeySigner::from_str(
        "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",
    )
    .unwrap();

    let deployment_tx = TxEip2930 {
        chain_id: 37u64,
        nonce: 0,
        gas_price: 1000,
        gas_limit: 10_060_000,
        to: TxKind::Create,
        value: Default::default(),
        access_list: Default::default(),
        input: hex::decode(CREATE_TESTER_DEPLOYMENT_BYTECODE)
            .unwrap()
            .into(),
    };
    let encoded_deployment_tx = rig::utils::sign_and_encode_alloy_tx(deployment_tx, &eoa_wallet);

    let run_tx = TxEip1559 {
        chain_id: 37u64,
        nonce: 1,
        max_fee_per_gas: 1000,
        max_priority_fee_per_gas: 1000,
        gas_limit: 1_250_000,
        to: TxKind::Call(address!("057ef64e23666f000b34ae31332854acbd1c8544")),
        value: Default::default(),
        access_list: Default::default(),
        // 'run()'
        input: hex::decode("c0406226").unwrap().into(),
    };
    let encoded_run_tx = rig::utils::sign_and_encode_alloy_tx(run_tx, &eoa_wallet);

    let output = run_transactions_as_eoa(
        eoa_wallet.address(),
        vec![encoded_deployment_tx, encoded_run_tx],
    );

    let sset: HashSet<Bytes32> = output.storage_writes.iter().map(|x| x.key).collect();

    // These are addresses taken from tests/forge/broadcast file.
    let addresses = [
        // main contracts
        address!("057ef64E23666F000b34aE31332854aCBd1c8544"),
        // contracts deployed in constructor
        address!("3b3112c4376d037822DECFf3Fe6CD30E1E726517"),
        address!("94fFf89F1Bd236b709Ef01729Db481258015F8bf"),
        // contracts deployed in 'run'
        address!("F9Ec57D2436177B4Decf90Ef9EdffCef0cC0EE25"),
        address!("534E0617025E2800498B6b9B8466F13fC8F84347"),
        address!("5B2855689d05c9D081a1023dF585FaAae0b51832"),
    ];

    for address in addresses {
        assert!(
            sset.contains(&address_to_bytecodehash_key(&address)),
            "No contract deployed to  {:?}.",
            address
        );
    }
}

#[test]
fn run_forge_test_delegate_calls() {
    // From forge/out/DelegateCalls.sol/MainContract.json bytecode
    const CREATE_TESTER_DEPLOYMENT_BYTECODE: &str = "608060405234801561000f575f80fd5b5061071b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063c04062261461002d575b5f80fd5b610035610047565b60405190815260200160405180910390f35b5f80604051610055906101e2565b604051809103905ff08015801561006e573d5f803e3d5ffd5b5090505f8160405161007f906101ef565b6001600160a01b039091168152602001604051809103905ff0801580156100a8573d5f803e3d5ffd5b5060408051600481526024810182526020810180516001600160e01b031663c41acde760e01b179052905191925082915f9182916001600160a01b038516916100f0916101fc565b5f60405180830381855afa9150503d805f8114610128576040519150601f19603f3d011682016040523d82523d5f602084013e61012d565b606091505b50915091508161017b5760405162461bcd60e51b815260206004820152601460248201527311195b1959d85d194818d85b1b0819985a5b195960621b60448201526064015b60405180910390fd5b5f818060200190518101906101909190610228565b9050806012146101d85760405162461bcd60e51b81526020600482015260136024820152720a4cae6ead8e840e6d0deead8c840c4ca40627606b1b6044820152606401610172565b9695505050505050565b6101028061024083390190565b6103a48061034283390190565b5f82515f5b8181101561021b5760208186018101518583015201610201565b505f920191825250919050565b5f60208284031215610238575f80fd5b505191905056fe608060405234801561000f575f80fd5b5060e68061001c5f395ff3fe6080604052348015600e575f80fd5b5060043610603a575f3560e01c80632c8337d914603e5780638381f58a146046578063f2c9ecd814605f575b5f80fd5b60446065565b005b604d5f5481565b60405190815260200160405180910390f35b604d607b565b60015f8082825460749190608c565b9091555050565b5f80546087906003608c565b905090565b8082018082111560aa57634e487b7160e01b5f52601160045260245ffd5b9291505056fea26469706673582212202fd4ab3a1bc70775cc26f6b6c420276d7658b236c6f21474d0c9f6a31be37b8764736f6c63430008180033608060405234801561000f575f80fd5b506040516103a43803806103a483398101604081905261002e91610057565b600180546001600160a01b0319166001600160a01b0392909216919091179055600f5f55610084565b5f60208284031215610067575f80fd5b81516001600160a01b038116811461007d575f80fd5b9392505050565b610313806100915f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c8063097bea191461004e5780635c60da1b146100585780638381f58a14610088578063c41acde71461009e575b5f80fd5b6100566100a6565b005b60015461006b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100905f5481565b60405190815260200161007f565b61009061018b565b60015460408051600481526024810182526020810180516001600160e01b0316632c8337d960e01b17905290515f926001600160a01b0316916100e891610275565b5f60405180830381855af49150503d805f8114610120576040519150601f19603f3d011682016040523d82523d5f602084013e610125565b606091505b50509050806101725760405162461bcd60e51b815260206004820152601460248201527311195b1959d85d194818d85b1b0819985a5b195960621b60448201526064015b60405180910390fd5b60015f8082825461018391906102a1565b909155505050565b60015460408051600481526024810182526020810180516001600160e01b0316631e593d9b60e31b17905290515f92839283926001600160a01b03909216916101d49190610275565b5f60405180830381855af49150503d805f811461020c576040519150601f19603f3d011682016040523d82523d5f602084013e610211565b606091505b50915091508161025a5760405162461bcd60e51b815260206004820152601460248201527311195b1959d85d194818d85b1b0819985a5b195960621b6044820152606401610169565b8080602001905181019061026e91906102c6565b9250505090565b5f82515f5b81811015610294576020818601810151858301520161027a565b505f920191825250919050565b808201808211156102c057634e487b7160e01b5f52601160045260245ffd5b92915050565b5f602082840312156102d6575f80fd5b505191905056fea26469706673582212203051a960a90fc77a1f13e9ff4cc19abe74503163ebe45d2e70a0f7ac2f17dbcb64736f6c63430008180033a264697066735822122069dd5a94413258ac091bfbc24ab78fbec8c52f2a31ca6e8584fa5af4d3e7cb0d64736f6c63430008180033";

    // Wallet (3) from anvil
    let eoa_wallet = PrivateKeySigner::from_str(
        "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",
    )
    .unwrap();

    let deployment_tx = TxEip2930 {
        chain_id: 37u64,
        nonce: 0,
        gas_price: 1000,
        gas_limit: 10_060_000,
        to: TxKind::Create,
        value: Default::default(),
        access_list: Default::default(),
        input: hex::decode(CREATE_TESTER_DEPLOYMENT_BYTECODE)
            .unwrap()
            .into(),
    };
    let encoded_deployment_tx = rig::utils::sign_and_encode_alloy_tx(deployment_tx, &eoa_wallet);

    let run_tx = TxEip1559 {
        chain_id: 37u64,
        nonce: 1,
        max_fee_per_gas: 1000,
        max_priority_fee_per_gas: 1000,
        gas_limit: 1_250_000,
        to: TxKind::Call(address!("057ef64e23666f000b34ae31332854acbd1c8544")),
        value: Default::default(),
        access_list: Default::default(),
        // 'run()'
        input: hex::decode("c0406226").unwrap().into(),
    };
    let encoded_run_tx = rig::utils::sign_and_encode_alloy_tx(run_tx, &eoa_wallet);

    let output = run_transactions_as_eoa(
        eoa_wallet.address(),
        vec![encoded_deployment_tx, encoded_run_tx],
    );

    for result in &output.tx_results {
        let result = result.as_ref().unwrap();
        dbg!(&result);
        assert!(result.is_success(), "Transaction failed: {:?}", result);
    }
}
