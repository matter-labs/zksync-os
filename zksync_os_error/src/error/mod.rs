//
// AUTOGENERATED BASED ON A SET OF JSON FILES, DO NOT EDIT MANUALLY
//
pub(crate) mod definitions;
pub(crate) mod domains;
use crate::error::domains::AnvilZksync;
use crate::error::domains::Compiler;
use crate::error::domains::Core;
use crate::error::domains::ExecutionEnvironment;
use crate::error::domains::Foundry;
use crate::error::domains::Hardhat;
use crate::error::domains::Os;
use crate::error::domains::ZksyncError;
use crate::identifier::Identifier;
#[cfg(not(feature = "std"))]
use alloc::string::String;
use core::error::Error;
pub trait IError<ContainedType>: Error
where
    ContainedType: Clone,
{
    fn get_identifier(&self) -> Identifier;
    fn get_message(&self) -> String;
    fn get_data(&self) -> ContainedType;
}
#[cfg(not(feature = "use_serde"))]
pub trait IUnifiedError<ContainedType>: IError<ContainedType>
where
    ContainedType: Clone,
{
}
#[cfg(feature = "use_serde")]
pub trait IUnifiedError<ContainedType>:
    serde::Serialize + for<'de> serde::Deserialize<'de> + IError<ContainedType>
where
    ContainedType: Clone,
{
}
pub trait ICustomError<U, C>
where
    U: IUnifiedError<C>,
    C: Clone,
{
    fn to_unified(&self) -> U;
}
pub trait CustomErrorMessage {
    fn get_message(&self) -> String;
}
pub trait NamedError {
    fn get_error_name(&self) -> String;
}
impl IError<ZksyncError> for ZksyncError {
    fn get_identifier(&self) -> Identifier {
        Identifier {
            kind: self.get_kind(),
            code: self.get_code(),
        }
    }
    fn get_message(&self) -> String {
        match self {
            ZksyncError::AnvilZksync(AnvilZksync::AnvilEnvironment(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::AnvilGeneric(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::AnvilNode(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::GasEstimation(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::Halt(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::Revert(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::StateLoader(error)) => error.get_message(),
            ZksyncError::AnvilZksync(AnvilZksync::TransactionValidation(error)) => {
                error.get_message()
            }
            ZksyncError::Compiler(Compiler::LLVM_EVM(error)) => error.get_message(),
            ZksyncError::Compiler(Compiler::LLVM_Era(error)) => error.get_message(),
            ZksyncError::Compiler(Compiler::Solc(error)) => error.get_message(),
            ZksyncError::Compiler(Compiler::SolcFork(error)) => error.get_message(),
            ZksyncError::Compiler(Compiler::Zksolc(error)) => error.get_message(),
            ZksyncError::Compiler(Compiler::Zkvyper(error)) => error.get_message(),
            ZksyncError::Core(Core::API(error)) => error.get_message(),
            ZksyncError::Core(Core::EraVM(error)) => error.get_message(),
            ZksyncError::Core(Core::ExecutionPlatform(error)) => error.get_message(),
            ZksyncError::Core(Core::Sequencer(error)) => error.get_message(),
            ZksyncError::Core(Core::Validation(error)) => error.get_message(),
            ZksyncError::ExecutionEnvironment(ExecutionEnvironment::Common(error)) => {
                error.get_message()
            }
            ZksyncError::ExecutionEnvironment(ExecutionEnvironment::EVM(error)) => {
                error.get_message()
            }
            ZksyncError::ExecutionEnvironment(ExecutionEnvironment::Native(error)) => {
                error.get_message()
            }
            ZksyncError::ExecutionEnvironment(ExecutionEnvironment::WASM(error)) => {
                error.get_message()
            }
            ZksyncError::Foundry(Foundry::FoundryUpstream(error)) => error.get_message(),
            ZksyncError::Foundry(Foundry::FoundryZksync(error)) => error.get_message(),
            ZksyncError::Hardhat(Hardhat::HardhatUpstream(error)) => error.get_message(),
            ZksyncError::Hardhat(Hardhat::HardhatZksync(error)) => error.get_message(),
            ZksyncError::Os(Os::Storage(error)) => error.get_message(),
            ZksyncError::Os(Os::System(error)) => error.get_message(),
            ZksyncError::Os(Os::SystemEnvironment(error)) => error.get_message(),
        }
    }
    fn get_data(&self) -> ZksyncError {
        self.clone()
    }
}
